// This is your Prisma schema file for SQLite (development)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                  String     @id @default(cuid())
  email              String     @unique
  password           String
  name               String
  role               String     @default("AGENT")
  companyName        String?
  contactNumber      String?
  isActive           Boolean    @default(true)
  isEmailVerified    Boolean    @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  appointments       Appointment[]
  notifications      Notification[]
  activityLogs       ActivityLog[]
  reportGenerations  ReportGeneration[]
  taskAssignments    TaskAssignment[]
  
  @@map("users")
}

// Doctor Management (Simplified for SQLite)
model Doctor {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  phone             String
  specialization    String
  qualifications    String?
  experience        Int?
  consultationFee   Float
  rating            Float         @default(0)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  hospitals         Hospital[]
  timeSlots         TimeSlot[]
  appointments      Appointment[]
  
  @@map("doctors")
}

// Hospital Management
model Hospital {
  id                String        @id @default(cuid())
  name              String
  address           String
  city              String
  district          String
  phone             String
  email             String?
  facilities        String?
  emergencyServices Boolean       @default(false)
  parkingAvailable  Boolean       @default(false)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  doctors           Doctor[]
  timeSlots         TimeSlot[]
  appointments      Appointment[]
  
  @@map("hospitals")
}

// Time Slot Management
model TimeSlot {
  id              String        @id @default(cuid())
  doctorId        String
  hospitalId      String
  date            DateTime
  startTime       String
  endTime         String
  maxAppointments Int           @default(20)
  bookedSlots     Int           @default(0)
  isAvailable     Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  hospital        Hospital      @relation(fields: [hospitalId], references: [id])
  appointments    Appointment[]
  
  @@unique([doctorId, hospitalId, date, startTime])
  @@map("time_slots")
}

model Appointment {
  id                   String            @id @default(cuid())
  appointmentNumber    String            @unique
  patientName          String
  patientEmail         String
  patientPhone         String
  patientNIC           String?
  patientDateOfBirth   DateTime?
  patientGender        String?
  patientAge           Int?
  emergencyContactName String?
  emergencyContactPhone String?
  medicalHistory       String?
  currentMedications   String?
  allergies            String?
  insuranceProvider    String?
  insurancePolicyNumber String?
  isNewPatient         Boolean           @default(true)
  appointmentType      String            @default("CONSULTATION")
  doctorId             String
  hospitalId           String
  timeSlotId           String
  appointmentDate      DateTime
  appointmentTime      String
  estimatedWaitTime    Int?
  queuePosition        Int?
  status               String            @default("CONFIRMED")
  paymentStatus        String            @default("PENDING")
  consultationFee      Float
  platformFee          Float             @default(0)
  totalAmount          Float
  notes                String?
  reasonForVisit       String?
  cancellationReason   String?
  cancellationDate     DateTime?
  completedAt          DateTime?
  bookedBy             String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  // Relations
  doctor              Doctor             @relation(fields: [doctorId], references: [id])
  hospital            Hospital           @relation(fields: [hospitalId], references: [id])
  timeSlot            TimeSlot           @relation(fields: [timeSlotId], references: [id])
  user                User?              @relation(fields: [bookedBy], references: [id])
  
  @@index([appointmentDate])
  @@index([status])
  @@index([doctorId])
  @@index([hospitalId])
  @@map("appointments")
}

// Notification System
model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  data        String?
  read        Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([read])
  @@map("notifications")
}

// Activity Logging
model ActivityLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  entity      String
  entityId    String?
  details     String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([entity])
  @@map("activity_logs")
}

// Report Generation
model ReportGeneration {
  id          String    @id @default(cuid())
  userId      String
  reportType  String
  parameters  String?
  status      String    @default("PENDING")
  fileUrl     String?
  error       String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@map("report_generations")
}

// Task Management
model TaskAssignment {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  priority    String    @default("MEDIUM")
  status      String    @default("PENDING")
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@map("task_assignments")
}
