// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                  String     @id @default(cuid())
  email              String     @unique
  password           String
  name               String
  role               UserRole   @default(AGENT)
  companyName        String?
  contactNumber      String?
  isActive           Boolean    @default(true)
  isEmailVerified    Boolean    @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  appointments       Appointment[]
  tasks             Task[]
  notifications     Notification[]
  reports          Report[]
  activityLogs     ActivityLog[]
  corporatePackages CorporatePackage[] @relation("CorporateUser")
  createdPackages  CorporatePackage[] @relation("PackageCreator")
  
  @@map("users")
}

model Doctor {
  id                String         @id @default(cuid())
  name              String
  email             String         @unique
  specialization    String
  qualification     String
  experience        Int           // years of experience
  consultationFee   Decimal       @db.Decimal(10, 2)
  rating            Decimal?      @db.Decimal(3, 2)
  profileImage      String?
  description       String?
  languages         String[]      // JSON array of languages
  availableDays     String[]      // JSON array of available days
  isActive          Boolean       @default(true)
  hospitalId        String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  hospital          Hospital      @relation(fields: [hospitalId], references: [id])
  appointments      Appointment[]
  timeSlots        TimeSlot[]
  
  @@map("doctors")
}

model Hospital {
  id              String     @id @default(cuid())
  name            String
  address         String
  city            String
  district        String
  contactNumber   String
  email           String
  website         String?
  facilities      String[]   // JSON array of facilities
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  doctors         Doctor[]
  appointments    Appointment[]
  
  @@map("hospitals")
}

model TimeSlot {
  id               String        @id @default(cuid())
  doctorId         String
  date             DateTime      @db.Date
  startTime        DateTime      @db.Time
  endTime          DateTime      @db.Time
  maxAppointments  Int           @default(20)
  currentBookings  Int           @default(0)
  isActive         Boolean       @default(true)
  consultationFee  Decimal       @db.Decimal(10, 2)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  doctor           Doctor        @relation(fields: [doctorId], references: [id])
  appointments     Appointment[]
  
  @@unique([doctorId, date, startTime])
  @@map("time_slots")
}

model Appointment {
  id                   String            @id @default(cuid())
  appointmentNumber    String            @unique
  patientName          String
  patientEmail         String
  patientPhone         String
  patientNIC           String?
  patientDateOfBirth   DateTime?
  patientGender        Gender?
  emergencyContactName String?
  emergencyContactPhone String?
  medicalHistory       String?
  currentMedications   String?
  allergies            String?
  insuranceProvider    String?
  insurancePolicyNumber String?
  isNewPatient         Boolean           @default(true)
  
  doctorId             String
  hospitalId           String
  timeSlotId           String
  bookedById           String
  
  appointmentDate      DateTime          @db.Date
  appointmentTime      DateTime          @db.Time
  estimatedWaitTime    Int?             // in minutes
  queuePosition        Int?
  
  status               AppointmentStatus @default(CONFIRMED)
  paymentStatus        PaymentStatus     @default(PENDING)
  consultationFee      Decimal           @db.Decimal(10, 2)
  totalAmount          Decimal           @db.Decimal(10, 2)
  
  notes               String?
  cancellationReason  String?
  cancellationDate    DateTime?
  
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  doctor              Doctor            @relation(fields: [doctorId], references: [id])
  hospital            Hospital          @relation(fields: [hospitalId], references: [id])
  timeSlot            TimeSlot          @relation(fields: [timeSlotId], references: [id])
  bookedBy            User              @relation(fields: [bookedById], references: [id])
  payments            Payment[]
  corporatePackageAppointments CorporatePackageAppointment[]
  notificationLogs    NotificationLog[]
  
  @@map("appointments")
}

model Payment {
  id                String        @id @default(cuid())
  appointmentId     String
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("LKR")
  paymentMethod     PaymentMethod
  transactionId     String?       @unique
  gatewayResponse   Json?
  status            PaymentStatus @default(PENDING)
  paidAt            DateTime?
  refundedAt        DateTime?
  refundAmount      Decimal?      @db.Decimal(10, 2)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  appointment       Appointment   @relation(fields: [appointmentId], references: [id])
  
  @@map("payments")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(PENDING)
  dueDate     DateTime?
  assignedToId String
  createdById String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  assignedTo  User         @relation(fields: [assignedToId], references: [id])
  
  @@map("tasks")
}

model Notification {
  id         String            @id @default(cuid())
  userId     String
  title      String
  message    String
  type       NotificationType
  isRead     Boolean           @default(false)
  readAt     DateTime?
  data       Json?            // Additional notification data
  createdAt  DateTime          @default(now())

  // Relations
  user       User              @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

model Report {
  id           String     @id @default(cuid())
  title        String
  type         ReportType
  description  String?
  parameters   Json?     // Report parameters and filters
  filePath     String?   // Generated file path
  status       ReportStatus @default(PENDING)
  generatedById String
  scheduledAt  DateTime?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  generatedBy  User       @relation(fields: [generatedById], references: [id])
  
  @@map("reports")
}

model ActivityLog {
  id          String    @id @default(cuid())
  userId      String
  action      String
  entityType  String
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  
  @@map("activity_logs")
}

model CorporatePackage {
  id                    String    @id @default(cuid())
  packageNumber         String    @unique
  corporateId           String
  packageName           String
  packageType           String    // "ANNUAL", "MONTHLY", "CUSTOM"
  description           String?
  totalAppointments     Int
  usedAppointments      Int       @default(0)
  remainingAppointments Int
  packageValue          Decimal   @db.Decimal(10, 2)
  discountPercentage    Decimal   @default(0) @db.Decimal(5, 2)
  validFromDate         DateTime  @db.Date
  validToDate           DateTime  @db.Date
  restrictions          Json?     // Package restrictions and terms
  isActive              Boolean   @default(true)
  createdBy             String
  deactivatedBy         String?
  deactivatedAt         DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  corporate             User               @relation("CorporateUser", fields: [corporateId], references: [id])
  creator               User               @relation("PackageCreator", fields: [createdBy], references: [id])
  packageBenefits       CorporatePackageBenefit[]
  packageAppointments   CorporatePackageAppointment[]

  @@map("corporate_packages")
}

model CorporatePackageBenefit {
  id                  String           @id @default(cuid())
  packageId           String
  benefitType         String           // "DISCOUNT", "FREE_CONSULTATION", "PRIORITY_BOOKING"
  benefitDescription  String
  benefitValue        Decimal?         @db.Decimal(10, 2)
  isActive            Boolean          @default(true)
  createdAt           DateTime         @default(now())

  // Relations
  package             CorporatePackage @relation(fields: [packageId], references: [id])

  @@map("corporate_package_benefits")
}

model CorporatePackageAppointment {
  id              String           @id @default(cuid())
  packageId       String
  appointmentId   String
  usedAt          DateTime         @default(now())
  discountApplied Decimal?         @db.Decimal(10, 2)

  // Relations
  package         CorporatePackage @relation(fields: [packageId], references: [id])
  appointment     Appointment      @relation(fields: [appointmentId], references: [id])

  @@unique([packageId, appointmentId])
  @@map("corporate_package_appointments")
}

model NotificationLog {
  id              String    @id @default(cuid())
  notificationId  String    @unique
  type            String    // 'appointment_confirmation', 'reminder', etc.
  method          String    // 'sms', 'email'
  recipient       String    // Phone number or email address
  status          String    // 'pending', 'sent', 'failed', 'scheduled'
  priority        String    @default("normal") // 'high', 'normal', 'low'
  templateData    Json?     // Data used for template variables
  appointmentId   String?
  triggeredBy     String?
  scheduledFor    DateTime?
  sentAt          DateTime?
  failureReason   String?
  providerResponse Json?    // Response from SMS/Email provider
  createdAt       DateTime  @default(now())

  // Relations
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])

  @@map("notification_logs")
}

model Translation {
  id         String   @id @default(cuid())
  language   String   // 'en', 'si', 'ta'
  module     String   // 'common', 'appointments', 'reports', etc.
  key        String   // Translation key identifier
  value      String   // Translated text
  context    String?  // Additional context for translators
  createdBy  String
  updatedBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([language, module, key], name: "language_module_key")
  @@map("translations")
}

model ExportJob {
  id              String        @id @default(cuid())
  jobId           String        @unique
  entityType      String        // 'appointments', 'patients', 'doctors', etc.
  format          ExportFormat
  fileName        String
  status          ExportStatus  @default(PROCESSING)
  exportedBy      String
  totalRecords    Int           @default(0)
  processedRecords Int          @default(0)
  filters         Json?         // Export filters applied
  columns         String[]      // Selected columns for export
  filePath        String?       // Generated file path
  fileSize        Int?          // File size in bytes
  downloadUrl     String?       // URL for file download
  expiresAt       DateTime?     // URL expiry time
  emailRecipients String[]      // Email addresses for delivery
  errorMessage    String?       // Error details if failed
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("export_jobs")
}

// Enums
enum UserRole {
  ADMIN
  SUPERVISOR
  AGENT
  CORPORATE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
  UNPAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  UNPAID
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  MOBILE_PAYMENT
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  APPOINTMENT_CONFIRMED
  APPOINTMENT_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  TASK_ASSIGNED
  SYSTEM_ALERT
  REMINDER
}

enum ReportType {
  APPOINTMENT_SUMMARY
  REVENUE_ANALYSIS
  AGENT_PERFORMANCE
  CUSTOMER_SATISFACTION
  OPERATIONAL_METRICS
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

enum ExportFormat {
  CSV
  EXCEL
  PDF
  JSON
}

enum ExportStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}